!function(e,a){"object"==typeof exports&&"object"==typeof module?module.exports=a(require("react")):"function"==typeof define&&define.amd?define(["react"],a):"object"==typeof exports?exports.ReactTimezone=a(require("react")):e.ReactTimezone=a(e.React)}("undefined"!=typeof self?self:this,function(e){return function(e){function a(t){if(i[t])return i[t].exports;var n=i[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}var i={};return a.m=e,a.c=i,a.d=function(e,i,t){a.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:t})},a.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(i,"a",i),i},a.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},a.p="",a(a.s=0)}([function(e,a,i){"use strict";function t(e){return e&&e.__esModule?e:{default:e}}function n(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}function r(e,a){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!a||"object"!=typeof a&&"function"!=typeof a?e:a}function o(e,a){if("function"!=typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function, not "+typeof a);e.prototype=Object.create(a&&a.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),a&&(Object.setPrototypeOf?Object.setPrototypeOf(e,a):e.__proto__=a)}Object.defineProperty(a,"__esModule",{value:!0});var s=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var i=arguments[a];for(var t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t])}return e},u=function(){function e(e,a){for(var i=0;i<a.length;i++){var t=a[i];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(a,i,t){return i&&e(a.prototype,i),t&&e(a,t),a}}(),c=i(1),l=t(c),f=i(2),p=t(f),T=i(7),M=t(T);i(8);var m=function(e){function a(e){n(this,a);var i=r(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e));return i.timezones=Object.keys(e.timezones),i.state={open:!1,focused:0,filter:"",value:i.getTimezone(e.defaultValue||e.value)},i}return o(a,e),u(a,[{key:"componentWillReceiveProps",value:function(e){if(e.value!==this.props.value){var a=this.getTimezone(e.value);this.field.value=a||"",this.setState({value:a})}}},{key:"getTimezone",value:function(e){var a=this;return e?this.timezones.find(function(i){return e===a.props.timezones[i]||e===i}):null}},{key:"filteredTimezones",value:function(){return this.timezones.filter(this.filterItems(this.state.filter))}},{key:"filterItems",value:function(e){return""===!e.trim()?function(){return!0}:function(a){return a.toLowerCase().includes(e.toLowerCase().replace(/\s/g,""))}}},{key:"handleFocus",value:function(e){this.field.value="",this.setState({open:!0}),"function"==typeof this.props.inputProps.onFocus&&this.props.inputProps.onFocus(e)}},{key:"handleBlur",value:function(e){this.field.value=this.state.value||"",this.setState({open:!1}),"function"==typeof this.props.inputProps.onBlur&&this.props.inputProps.onBlur(e)}},{key:"handleFilterChange",value:function(e){var a=this.field.value.trim();this.setState({filter:a,focused:0}),"function"==typeof this.props.inputProps.onChange&&this.props.inputProps.onChange(e)}},{key:"handleKeyPress",value:function(e){var a=this.filteredTimezones();if("ArrowUp"===e.key||"ArrowDown"===e.key){e.preventDefault();var i=this.state.focused;"ArrowUp"===e.key?(i-=1)<1&&(i=a.length):(i+=1)>a.length&&(i=1),this.setState({focused:i}),this.options.children[i%this.options.children.length].scrollIntoView()}else if("Enter"===e.key){var t=a[this.state.focused%a.length];t?(this.handleSelect(t),e.target.blur()):this.setState({focused:0})}}},{key:"handleSelect",value:function(e){this.setState({filter:"",focused:0,open:!1}),this.props.onChange?this.props.onChange(this.props.timezones[e],e):(this.field.value=e,this.setState({value:e}))}},{key:"handleItemFocus",value:function(e){this.setState({focused:e})}},{key:"value",value:function(){var e=this.state.value;return e?this.props.timezones[e]:null}},{key:"render",value:function(){var e=this,a=this.props.inputProps,i=this.state.value,t=!this.state.open&&i,n=this.state.open;return l.default.createElement("div",{className:(0,M.default)("timezone-picker",{"timezone-picker-open":n,"timezone-picker-selected":t},this.props.className),style:this.props.style},l.default.createElement("div",{className:"timezone-picker-textfield"},l.default.createElement("input",s({disabled:this.props.disabled,type:"text",onFocus:function(a){return e.handleFocus(a)},onBlur:function(a){return e.handleBlur(a)},onChange:function(a){return e.handleFilterChange(a)},onKeyDown:function(a){return e.handleKeyPress(a)},defaultValue:i,ref:function(a){e.field=a},autoComplete:"off"},a))),l.default.createElement("ul",{className:"timezone-picker-list",ref:function(a){e.options=a}},this.filteredTimezones().map(function(a,i,t){var n=e.state.focused%t.length===i;return l.default.createElement("button",{key:a,title:a,onMouseDown:function(){return e.handleSelect(a)},onMouseOver:function(){return e.handleItemFocus(i)},onFocus:function(){return e.handleItemFocus(i)},className:(0,M.default)("timezone-picker-list-item",{"timezone-picker-list-item-active":n})},a)})))}}]),a}(l.default.Component);a.default=m,m.propTypes={defaultValue:p.default.string,disabled:p.default.bool,value:p.default.string,onChange:p.default.func,className:p.default.string,style:p.default.shape({}),inputProps:p.default.shape({onBlur:p.default.func,onFocus:p.default.func,onChange:p.default.func}),timezones:p.default.shape({})},m.defaultProps={defaultValue:"",value:"",onChange:function(){},className:"",style:{},disabled:!1,inputProps:{},timezones:i(13)}},function(a,i){a.exports=e},function(e,a,i){e.exports=i(3)()},function(e,a,i){"use strict";var t=i(4),n=i(5),r=i(6);e.exports=function(){function e(e,a,i,t,o,s){s!==r&&n(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function a(){return e}e.isRequired=e;var i={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:a,element:e,instanceOf:a,node:e,objectOf:a,oneOf:a,oneOfType:a,shape:a,exact:a};return i.checkPropTypes=t,i.PropTypes=i,i}},function(e,a,i){"use strict";function t(e){return function(){return e}}var n=function(){};n.thatReturns=t,n.thatReturnsFalse=t(!1),n.thatReturnsTrue=t(!0),n.thatReturnsNull=t(null),n.thatReturnsThis=function(){return this},n.thatReturnsArgument=function(e){return e},e.exports=n},function(e,a,i){"use strict";function t(e,a,i,t,r,o,s,u){if(n(a),!e){var c;if(void 0===a)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[i,t,r,o,s,u],f=0;c=new Error(a.replace(/%s/g,function(){return l[f++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var n=function(e){};e.exports=t},function(e,a,i){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,a,i){var t,n;/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";function i(){for(var e=[],a=0;a<arguments.length;a++){var t=arguments[a];if(t){var n=typeof t;if("string"===n||"number"===n)e.push(t);else if(Array.isArray(t))e.push(i.apply(null,t));else if("object"===n)for(var o in t)r.call(t,o)&&t[o]&&e.push(o)}}return e.join(" ")}var r={}.hasOwnProperty;void 0!==e&&e.exports?e.exports=i:(t=[],void 0!==(n=function(){return i}.apply(a,t))&&(e.exports=n))}()},function(e,a,i){var t=i(9);"string"==typeof t&&(t=[[e.i,t,""]]);var n={hmr:!0};n.transform=void 0;i(11)(t,n);t.locals&&(e.exports=t.locals)},function(e,a,i){a=e.exports=i(10)(!1),a.push([e.i,".timezone-picker{display:inline-block;font:13px sans-serif;position:relative}.timezone-picker-textfield input{width:100%;padding:9px 12px;font:inherit;box-sizing:border-box;outline:0;background:#fff;border:1px solid #e6ebec;border-radius:2px}.timezone-picker-list{position:relative;top:100%;left:0;right:0;max-height:200px;overflow-y:auto;margin:0;padding:0;border:1px solid #e6ebec;margin-top:-1px;border-radius:0 0 3px 3px;display:none}.timezone-picker-list-item{color:#444;padding:5px 12px;cursor:pointer;outline:none;display:block;border:0;width:100%;text-align:left;border-radius:0;font:inherit}.timezone-picker-list-item-active{background:#ececec}.timezone-picker-open .timezone-picker-list{display:block}.timezone-picker-selected .timezone-picker-textfield input{color:#474747}",""])},function(e,a){function i(e,a){var i=e[1]||"",n=e[3];if(!n)return i;if(a&&"function"==typeof btoa){var r=t(n);return[i].concat(n.sources.map(function(e){return"/*# sourceURL="+n.sourceRoot+e+" */"})).concat([r]).join("\n")}return[i].join("\n")}function t(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var a=[];return a.toString=function(){return this.map(function(a){var t=i(a,e);return a[2]?"@media "+a[2]+"{"+t+"}":t}).join("")},a.i=function(e,i){"string"==typeof e&&(e=[[null,e,""]]);for(var t={},n=0;n<this.length;n++){var r=this[n][0];"number"==typeof r&&(t[r]=!0)}for(n=0;n<e.length;n++){var o=e[n];"number"==typeof o[0]&&t[o[0]]||(i&&!o[2]?o[2]=i:i&&(o[2]="("+o[2]+") and ("+i+")"),a.push(o))}},a}},function(e,a,i){function t(e,a){for(var i=0;i<e.length;i++){var t=e[i],n=M[t.id];if(n){n.refs++;for(var r=0;r<n.parts.length;r++)n.parts[r](t.parts[r]);for(;r<t.parts.length;r++)n.parts.push(l(t.parts[r],a))}else{for(var o=[],r=0;r<t.parts.length;r++)o.push(l(t.parts[r],a));M[t.id]={id:t.id,refs:1,parts:o}}}}function n(e,a){for(var i=[],t={},n=0;n<e.length;n++){var r=e[n],o=a.base?r[0]+a.base:r[0],s=r[1],u=r[2],c=r[3],l={css:s,media:u,sourceMap:c};t[o]?t[o].parts.push(l):i.push(t[o]={id:o,parts:[l]})}return i}function r(e,a){var i=d(e.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var t=A[A.length-1];if("top"===e.insertAt)t?t.nextSibling?i.insertBefore(a,t.nextSibling):i.appendChild(a):i.insertBefore(a,i.firstChild),A.push(a);else if("bottom"===e.insertAt)i.appendChild(a);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=d(e.insertInto+" "+e.insertAt.before);i.insertBefore(a,n)}}function o(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var a=A.indexOf(e);a>=0&&A.splice(a,1)}function s(e){var a=document.createElement("style");return e.attrs.type="text/css",c(a,e.attrs),r(e,a),a}function u(e){var a=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",c(a,e.attrs),r(e,a),a}function c(e,a){Object.keys(a).forEach(function(i){e.setAttribute(i,a[i])})}function l(e,a){var i,t,n,r;if(a.transform&&e.css){if(!(r=a.transform(e.css)))return function(){};e.css=r}if(a.singleton){var c=G++;i=h||(h=s(a)),t=f.bind(null,i,c,!1),n=f.bind(null,i,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=u(a),t=T.bind(null,i,a),n=function(){o(i),i.href&&URL.revokeObjectURL(i.href)}):(i=s(a),t=p.bind(null,i),n=function(){o(i)});return t(e),function(a){if(a){if(a.css===e.css&&a.media===e.media&&a.sourceMap===e.sourceMap)return;t(e=a)}else n()}}function f(e,a,i,t){var n=i?"":t.css;if(e.styleSheet)e.styleSheet.cssText=b(a,n);else{var r=document.createTextNode(n),o=e.childNodes;o[a]&&e.removeChild(o[a]),o.length?e.insertBefore(r,o[a]):e.appendChild(r)}}function p(e,a){var i=a.css,t=a.media;if(t&&e.setAttribute("media",t),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}function T(e,a,i){var t=i.css,n=i.sourceMap,r=void 0===a.convertToAbsoluteUrls&&n;(a.convertToAbsoluteUrls||r)&&(t=v(t)),n&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var o=new Blob([t],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}var M={},m=function(e){var a;return function(){return void 0===a&&(a=e.apply(this,arguments)),a}}(function(){return window&&document&&document.all&&!window.atob}),d=function(e){var a={};return function(i){if(void 0===a[i]){var t=e.call(this,i);if(t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}a[i]=t}return a[i]}}(function(e){return document.querySelector(e)}),h=null,G=0,A=[],v=i(12);e.exports=function(e,a){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");a=a||{},a.attrs="object"==typeof a.attrs?a.attrs:{},a.singleton||"boolean"==typeof a.singleton||(a.singleton=m()),a.insertInto||(a.insertInto="head"),a.insertAt||(a.insertAt="bottom");var i=n(e,a);return t(i,a),function(e){for(var r=[],o=0;o<i.length;o++){var s=i[o],u=M[s.id];u.refs--,r.push(u)}if(e){t(n(e,a),a)}for(var o=0;o<r.length;o++){var u=r[o];if(0===u.refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete M[u.id]}}}};var b=function(){var e=[];return function(a,i){return e[a]=i,e.filter(Boolean).join("\n")}}()},function(e,a){e.exports=function(e){var a="undefined"!=typeof window&&window.location;if(!a)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var i=a.protocol+"//"+a.host,t=i+a.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,a){var n=a.trim().replace(/^"(.*)"$/,function(e,a){return a}).replace(/^'(.*)'$/,function(e,a){return a});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(n))return e;var r;return r=0===n.indexOf("//")?n:0===n.indexOf("/")?i+n:t+n.replace(/^\.\//,""),"url("+JSON.stringify(r)+")"})}},function(e,a){e.exports={"(GMT-11:00) Niue":"Pacific/Niue","(GMT-11:00) Pago Pago":"Pacific/Pago_Pago","(GMT-10:00) Hawaii Time":"Pacific/Honolulu","(GMT-10:00) Rarotonga":"Pacific/Rarotonga","(GMT-10:00) Tahiti":"Pacific/Tahiti","(GMT-09:30) Marquesas":"Pacific/Marquesas","(GMT-09:00) Alaska Time":"America/Anchorage","(GMT-09:00) Gambier":"Pacific/Gambier","(GMT-08:00) Pacific Time":"America/Los_Angeles","(GMT-08:00) Pacific Time - Tijuana":"America/Tijuana","(GMT-08:00) Pacific Time - Vancouver":"America/Vancouver","(GMT-08:00) Pacific Time - Whitehorse":"America/Whitehorse","(GMT-08:00) Pitcairn":"Pacific/Pitcairn","(GMT-07:00) Mountain Time":"America/Denver","(GMT-07:00) Mountain Time - Arizona":"America/Phoenix","(GMT-07:00) Mountain Time - Chihuahua, Mazatlan":"America/Mazatlan","(GMT-07:00) Mountain Time - Dawson Creek":"America/Dawson_Creek","(GMT-07:00) Mountain Time - Edmonton":"America/Edmonton","(GMT-07:00) Mountain Time - Hermosillo":"America/Hermosillo","(GMT-07:00) Mountain Time - Yellowknife":"America/Yellowknife","(GMT-06:00) Belize":"America/Belize","(GMT-06:00) Central Time":"America/Chicago","(GMT-06:00) Central Time - Mexico City":"America/Mexico_City","(GMT-06:00) Central Time - Regina":"America/Regina","(GMT-06:00) Central Time - Tegucigalpa":"America/Tegucigalpa","(GMT-06:00) Central Time - Winnipeg":"America/Winnipeg","(GMT-06:00) Costa Rica":"America/Costa_Rica","(GMT-06:00) El Salvador":"America/El_Salvador","(GMT-06:00) Galapagos":"Pacific/Galapagos","(GMT-06:00) Guatemala":"America/Guatemala","(GMT-06:00) Managua":"America/Managua","(GMT-05:00) America Cancun":"America/Cancun","(GMT-05:00) Bogota":"America/Bogota","(GMT-05:00) Easter Island":"Pacific/Easter","(GMT-05:00) Eastern Time":"America/New_York","(GMT-05:00) Eastern Time - Iqaluit":"America/Iqaluit","(GMT-05:00) Eastern Time - Toronto":"America/Toronto","(GMT-05:00) Guayaquil":"America/Guayaquil","(GMT-05:00) Havana":"America/Havana","(GMT-05:00) Jamaica":"America/Jamaica","(GMT-05:00) Lima":"America/Lima","(GMT-05:00) Nassau":"America/Nassau","(GMT-05:00) Panama":"America/Panama","(GMT-05:00) Port-au-Prince":"America/Port-au-Prince","(GMT-05:00) Rio Branco":"America/Rio_Branco","(GMT-04:00) Atlantic Time - Halifax":"America/Halifax","(GMT-04:00) Barbados":"America/Barbados","(GMT-04:00) Bermuda":"Atlantic/Bermuda","(GMT-04:00) Boa Vista":"America/Boa_Vista","(GMT-04:00) Caracas":"America/Caracas","(GMT-04:00) Curacao":"America/Curacao","(GMT-04:00) Grand Turk":"America/Grand_Turk","(GMT-04:00) Guyana":"America/Guyana","(GMT-04:00) La Paz":"America/La_Paz","(GMT-04:00) Manaus":"America/Manaus","(GMT-04:00) Martinique":"America/Martinique","(GMT-04:00) Port of Spain":"America/Port_of_Spain","(GMT-04:00) Porto Velho":"America/Porto_Velho","(GMT-04:00) Puerto Rico":"America/Puerto_Rico","(GMT-04:00) Santo Domingo":"America/Santo_Domingo","(GMT-04:00) Thule":"America/Thule","(GMT-03:30) Newfoundland Time - St. Johns":"America/St_Johns","(GMT-03:00) Araguaina":"America/Araguaina","(GMT-03:00) Asuncion":"America/Asuncion","(GMT-03:00) Belem":"America/Belem","(GMT-03:00) Buenos Aires":"America/Argentina/Buenos_Aires","(GMT-03:00) Campo Grande":"America/Campo_Grande","(GMT-03:00) Cayenne":"America/Cayenne","(GMT-03:00) Cuiaba":"America/Cuiaba","(GMT-03:00) Fortaleza":"America/Fortaleza","(GMT-03:00) Godthab":"America/Godthab","(GMT-03:00) Maceio":"America/Maceio","(GMT-03:00) Miquelon":"America/Miquelon","(GMT-03:00) Montevideo":"America/Montevideo","(GMT-03:00) Palmer":"Antarctica/Palmer","(GMT-03:00) Paramaribo":"America/Paramaribo","(GMT-03:00) Punta Arenas":"America/Punta_Arenas","(GMT-03:00) Recife":"America/Recife","(GMT-03:00) Rothera":"Antarctica/Rothera","(GMT-03:00) Salvador":"America/Bahia","(GMT-03:00) Santiago":"America/Santiago","(GMT-03:00) Stanley":"Atlantic/Stanley","(GMT-02:00) Noronha":"America/Noronha","(GMT-02:00) Sao Paulo":"America/Sao_Paulo","(GMT-02:00) South Georgia":"Atlantic/South_Georgia","(GMT-01:00) Azores":"Atlantic/Azores","(GMT-01:00) Cape Verde":"Atlantic/Cape_Verde","(GMT-01:00) Scoresbysund":"America/Scoresbysund","(GMT+00:00) Abidjan":"Africa/Abidjan","(GMT+00:00) Accra":"Africa/Accra","(GMT+00:00) Bissau":"Africa/Bissau","(GMT+00:00) Canary Islands":"Atlantic/Canary","(GMT+00:00) Casablanca":"Africa/Casablanca","(GMT+00:00) Danmarkshavn":"America/Danmarkshavn","(GMT+00:00) Dublin":"Europe/Dublin","(GMT+00:00) El Aaiun":"Africa/El_Aaiun","(GMT+00:00) Faeroe":"Atlantic/Faroe","(GMT+00:00) GMT (no daylight saving)":"Etc/GMT","(GMT+00:00) Lisbon":"Europe/Lisbon","(GMT+00:00) London":"Europe/London","(GMT+00:00) Monrovia":"Africa/Monrovia","(GMT+00:00) Reykjavik":"Atlantic/Reykjavik",UTC:"UTC","(GMT+01:00) Algiers":"Africa/Algiers","(GMT+01:00) Amsterdam":"Europe/Amsterdam","(GMT+01:00) Andorra":"Europe/Andorra","(GMT+01:00) Berlin":"Europe/Berlin","(GMT+01:00) Brussels":"Europe/Brussels","(GMT+01:00) Budapest":"Europe/Budapest","(GMT+01:00) Central European Time - Belgrade":"Europe/Belgrade","(GMT+01:00) Central European Time - Prague":"Europe/Prague","(GMT+01:00) Ceuta":"Africa/Ceuta","(GMT+01:00) Copenhagen":"Europe/Copenhagen","(GMT+01:00) Gibraltar":"Europe/Gibraltar","(GMT+01:00) Lagos":"Africa/Lagos","(GMT+01:00) Luxembourg":"Europe/Luxembourg","(GMT+01:00) Madrid":"Europe/Madrid","(GMT+01:00) Malta":"Europe/Malta","(GMT+01:00) Monaco":"Europe/Monaco","(GMT+01:00) Ndjamena":"Africa/Ndjamena","(GMT+01:00) Oslo":"Europe/Oslo","(GMT+01:00) Paris":"Europe/Paris","(GMT+01:00) Rome":"Europe/Rome","(GMT+01:00) Stockholm":"Europe/Stockholm","(GMT+01:00) Tirane":"Europe/Tirane","(GMT+01:00) Tunis":"Africa/Tunis","(GMT+01:00) Vienna":"Europe/Vienna","(GMT+01:00) Warsaw":"Europe/Warsaw","(GMT+01:00) Zurich":"Europe/Zurich","(GMT+02:00) Amman":"Asia/Amman","(GMT+02:00) Athens":"Europe/Athens","(GMT+02:00) Beirut":"Asia/Beirut","(GMT+02:00) Bucharest":"Europe/Bucharest","(GMT+02:00) Cairo":"Africa/Cairo","(GMT+02:00) Chisinau":"Europe/Chisinau","(GMT+02:00) Damascus":"Asia/Damascus","(GMT+02:00) Gaza":"Asia/Gaza","(GMT+02:00) Helsinki":"Europe/Helsinki","(GMT+02:00) Jerusalem":"Asia/Jerusalem","(GMT+02:00) Johannesburg":"Africa/Johannesburg","(GMT+02:00) Khartoum":"Africa/Khartoum","(GMT+02:00) Kiev":"Europe/Kiev","(GMT+02:00) Maputo":"Africa/Maputo","(GMT+02:00) Moscow-01 - Kaliningrad":"Europe/Kaliningrad","(GMT+02:00) Nicosia":"Asia/Nicosia","(GMT+02:00) Riga":"Europe/Riga","(GMT+02:00) Sofia":"Europe/Sofia","(GMT+02:00) Tallinn":"Europe/Tallinn","(GMT+02:00) Tripoli":"Africa/Tripoli","(GMT+02:00) Vilnius":"Europe/Vilnius","(GMT+02:00) Windhoek":"Africa/Windhoek","(GMT+03:00) Baghdad":"Asia/Baghdad","(GMT+03:00) Istanbul":"Europe/Istanbul","(GMT+03:00) Minsk":"Europe/Minsk","(GMT+03:00) Moscow+00 - Moscow":"Europe/Moscow","(GMT+03:00) Nairobi":"Africa/Nairobi","(GMT+03:00) Qatar":"Asia/Qatar","(GMT+03:00) Riyadh":"Asia/Riyadh","(GMT+03:00) Syowa":"Antarctica/Syowa","(GMT+03:30) Tehran":"Asia/Tehran","(GMT+04:00) Baku":"Asia/Baku","(GMT+04:00) Dubai":"Asia/Dubai","(GMT+04:00) Mahe":"Indian/Mahe","(GMT+04:00) Mauritius":"Indian/Mauritius","(GMT+04:00) Moscow+01 - Samara":"Europe/Samara","(GMT+04:00) Reunion":"Indian/Reunion","(GMT+04:00) Tbilisi":"Asia/Tbilisi","(GMT+04:00) Yerevan":"Asia/Yerevan","(GMT+04:30) Kabul":"Asia/Kabul","(GMT+05:00) Aqtau":"Asia/Aqtau","(GMT+05:00) Aqtobe":"Asia/Aqtobe","(GMT+05:00) Ashgabat":"Asia/Ashgabat","(GMT+05:00) Dushanbe":"Asia/Dushanbe","(GMT+05:00) Karachi":"Asia/Karachi","(GMT+05:00) Kerguelen":"Indian/Kerguelen","(GMT+05:00) Maldives":"Indian/Maldives","(GMT+05:00) Mawson":"Antarctica/Mawson","(GMT+05:00) Moscow+02 - Yekaterinburg":"Asia/Yekaterinburg","(GMT+05:00) Tashkent":"Asia/Tashkent","(GMT+05:30) Colombo":"Asia/Colombo","(GMT+05:30) India Standard Time":"Asia/Calcutta","(GMT+05:45) Kathmandu":"Asia/Kathmandu","(GMT+06:00) Almaty":"Asia/Almaty","(GMT+06:00) Bishkek":"Asia/Bishkek","(GMT+06:00) Chagos":"Indian/Chagos","(GMT+06:00) Dhaka":"Asia/Dhaka","(GMT+06:00) Moscow+03 - Omsk":"Asia/Omsk","(GMT+06:00) Thimphu":"Asia/Thimphu","(GMT+06:00) Vostok":"Antarctica/Vostok","(GMT+06:30) Cocos":"Indian/Cocos","(GMT+06:30) Rangoon":"Asia/Yangon","(GMT+07:00) Bangkok":"Asia/Bangkok","(GMT+07:00) Christmas":"Indian/Christmas","(GMT+07:00) Davis":"Antarctica/Davis","(GMT+07:00) Hanoi":"Asia/Saigon","(GMT+07:00) Hovd":"Asia/Hovd","(GMT+07:00) Jakarta":"Asia/Jakarta","(GMT+07:00) Moscow+04 - Krasnoyarsk":"Asia/Krasnoyarsk","(GMT+08:00) Brunei":"Asia/Brunei","(GMT+08:00) China Time - Beijing":"Asia/Shanghai","(GMT+08:00) Choibalsan":"Asia/Choibalsan","(GMT+08:00) Hong Kong":"Asia/Hong_Kong","(GMT+08:00) Kuala Lumpur":"Asia/Kuala_Lumpur","(GMT+08:00) Macau":"Asia/Macau","(GMT+08:00) Makassar":"Asia/Makassar","(GMT+08:00) Manila":"Asia/Manila","(GMT+08:00) Moscow+05 - Irkutsk":"Asia/Irkutsk","(GMT+08:00) Singapore":"Asia/Singapore","(GMT+08:00) Taipei":"Asia/Taipei","(GMT+08:00) Ulaanbaatar":"Asia/Ulaanbaatar","(GMT+08:00) Western Time - Perth":"Australia/Perth","(GMT+08:30) Pyongyang":"Asia/Pyongyang","(GMT+09:00) Dili":"Asia/Dili","(GMT+09:00) Jayapura":"Asia/Jayapura","(GMT+09:00) Moscow+06 - Yakutsk":"Asia/Yakutsk","(GMT+09:00) Palau":"Pacific/Palau","(GMT+09:00) Seoul":"Asia/Seoul","(GMT+09:00) Tokyo":"Asia/Tokyo","(GMT+09:30) Central Time - Darwin":"Australia/Darwin","(GMT+10:00) Dumont D'Urville":"Antarctica/DumontDUrville","(GMT+10:00) Eastern Time - Brisbane":"Australia/Brisbane","(GMT+10:00) Guam":"Pacific/Guam","(GMT+10:00) Moscow+07 - Vladivostok":"Asia/Vladivostok","(GMT+10:00) Port Moresby":"Pacific/Port_Moresby","(GMT+10:00) Truk":"Pacific/Chuuk","(GMT+10:30) Central Time - Adelaide":"Australia/Adelaide","(GMT+11:00) Casey":"Antarctica/Casey","(GMT+11:00) Eastern Time - Hobart":"Australia/Hobart","(GMT+11:00) Eastern Time - Melbourne, Sydney":"Australia/Sydney","(GMT+11:00) Efate":"Pacific/Efate","(GMT+11:00) Guadalcanal":"Pacific/Guadalcanal","(GMT+11:00) Kosrae":"Pacific/Kosrae","(GMT+11:00) Moscow+08 - Magadan":"Asia/Magadan","(GMT+11:00) Norfolk":"Pacific/Norfolk","(GMT+11:00) Noumea":"Pacific/Noumea","(GMT+11:00) Ponape":"Pacific/Pohnpei","(GMT+12:00) Funafuti":"Pacific/Funafuti","(GMT+12:00) Kwajalein":"Pacific/Kwajalein","(GMT+12:00) Majuro":"Pacific/Majuro","(GMT+12:00) Moscow+09 - Petropavlovsk-Kamchatskiy":"Asia/Kamchatka","(GMT+12:00) Nauru":"Pacific/Nauru","(GMT+12:00) Tarawa":"Pacific/Tarawa","(GMT+12:00) Wake":"Pacific/Wake","(GMT+12:00) Wallis":"Pacific/Wallis","(GMT+13:00) Auckland":"Pacific/Auckland","(GMT+13:00) Enderbury":"Pacific/Enderbury","(GMT+13:00) Fakaofo":"Pacific/Fakaofo","(GMT+13:00) Fiji":"Pacific/Fiji","(GMT+13:00) Tongatapu":"Pacific/Tongatapu","(GMT+14:00) Apia":"Pacific/Apia","(GMT+14:00) Kiritimati":"Pacific/Kiritimati"}}])});